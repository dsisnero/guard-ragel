require 'guard'
require 'guard/guard'
require 'guard/watcher'

module Guard
  class Ragel < Guard

    OUTPUT_FORMATS = {
      :ruby => ['-R', '.rb'],
      :c => ['-C', '.c'],
    }
  
    DEFAULTS = {
      :output_format => :ruby,       # Output format of ragel
      :options => '',                # Options to pass to ragel
      :notification => true,         # Enable notifications?
      :load_paths => Dir.glob('**/**').find_all {|i| File.directory?(i) }
    }
    
    def initialize(watchers = [], options = {})
      if options[:input]
        options[:output] = options[:input] unless options.has_key?(:output)
        watchers << ::Guard::Watcher.new(%r{^#{options.delete(:input)}/(.+\.rl)$})
      end
      
      super(watchers, DEFAULTS.merge(options))
    end
            
    # Runs ragel over the input file with specified options.
    #
    # @param file [String] path to file to build
    # @return [String] filename generated by running ragel
    #
    def build_ragel(file)
      # Get options for specified output format
      format_options = OUTPUT_FORMATS[options[:output_format]]

      # Determine name of the output file
      output_file = File.join(options[:output], File.basename(file), format_options[1])

      # Flag to make the chosen format
      format_flag =  format_options[0]

      system "ragel #{options[:options]} #{format_flag} #{file} -o #{output_file}"

      output_file
    end
    
    # Build all files being watched
    def run_all
      run_on_change(Watcher.match_files(self, Dir.glob(File.join('**', '*.*'))))
    end
    
    # Build the files given
    def run_on_change(paths)
      changed_files = paths.reject{ |f| File.basename(f)[0] == "_" }.map do |file|
        begin
          output_file = build_ragel(file)
          ::Guard::UI.info "-> rebuilt #{file}", :reset => true
          ::Guard::Notifier.notify("rebuilt #{file}", :title => "Guard::Ragel", :image => :success) if options[:notification]
          output_file

        end
      end.compact
      notify changed_files
    end
    
    def notify(changed_files)
      ::Guard.guards.reject{ |guard| guard == self }.each do |guard|
        paths = Watcher.match_files(guard, changed_files)
        guard.run_on_change paths unless paths.empty?
      end
    end

  end
end
